[package]
name = "orbitmines-explorer-wasm"
version = "0.1.0"
authors = ["Fadi Shawki <fadiorbitmines@gmail.com>"]
edition = "2021"

[lib]
# [crate-type](https://rustwasm.github.io/docs/wasm-pack/tutorials/npm-browser-packages/template-deep-dive/cargo-toml.html#1-crate-type)
crate-type = [
    # This specifies that the library is a C compatible dynamic library, which helps cargo pass the correct flags to the Rust compiler when targeting wasm32.
    "cdylib",
    "rlib"
]

[features]
default = ["console_error_panic_hook"]

[dependencies]
orbitmines-explorer = { path = "../explorer" }

# [wasm-bindgen](https://github.com/rustwasm/wasm-bindgen) facilitates high-level interactions between Rust and JavaScript. It allows one to import JavaScript things into Rust and export Rust things to JavaScript.
wasm-bindgen = "0.2.80"
# [wasm-bindgen-futures](https://github.com/rustwasm/wasm-bindgen/tree/master/crates/futures) is a bridge connecting JavaScript Promises and Rust Futures. It can convert in both directions and is useful when working with asynchronous tasks in Rust, and allows interacting with DOM events and I/O operations.
wasm-bindgen-futures = "0.4.35"

# [js-sys](https://github.com/rustwasm/wasm-bindgen/tree/master/crates/js-sys) Raw wasm-bindgen imports for all the JavaScript global types and methods, such as Object, Function, eval, etc. These APIs are portable across all standard ECMAScript environments, not just the Web, such as Node.js.
js-sys = "0.3.61"
# [web-sys](https://github.com/rustwasm/wasm-bindgen/tree/master/crates/web-sys) Raw wasm-bindgen imports for all the Web's APIs, such as DOM manipulation, setTimeout, Web GL, Web Audio, etc.
web-sys = { version = "0.3.62", features = [
    'Document',
    'Element',
    'HtmlElement',
    'Node',
    'Window',
] }

# The `console_error_panic_hook` crate provides better debugging of panics bylogging them with `console.error`. This is great for development, but requires all the `std::fmt` and `std::panicking` infrastructure, so isn't great for code size when deploying.
console_error_panic_hook = { version = "0.1.7", optional = true }

# [wee_alloc](https://github.com/rustwasm/wee_alloc) The Wasm-Enabled, Elfin Allocator. A small (~1K uncompressed .wasm) allocator implementation for when code size is a greater concern than allocation performance.
wee_alloc = { version = "0.4.5", optional = true }


[dev-dependencies]
wasm-bindgen-test = "0.3.30"

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"

[package.metadata.wasm-pack.profile.dev]
# Should `wasm-opt` be used to further optimize the wasm binary generated after
# the Rust compiler has finished? Using `wasm-opt` can often further decrease
# binary size or do clever tricks that haven't made their way into LLVM yet.
#
# Configuration is set to `false` by default for the dev profile, but it can
# be set to an array of strings which are explicit arguments to pass to
# `wasm-opt`. For example `['-Os']` would optimize for size while `['-O4']`
# would execute very expensive optimizations passes
wasm-opt = ['-O']

# [wasm-pack Config.toml](https://rustwasm.github.io/docs/wasm-pack/cargo-toml-configuration.html)
[package.metadata.wasm-pack.profile.dev.wasm-bindgen]
# Should we enable wasm-bindgen's debug assertions in its generated JS glue?
debug-js-glue = true
# Should wasm-bindgen demangle the symbols in the "name" custom section?
demangle-name-section = true
# Should we emit the DWARF debug info custom sections?
dwarf-debug-info = false

[package.metadata.wasm-pack.profile.profiling]
wasm-opt = ['-O']

[package.metadata.wasm-pack.profile.profiling.wasm-bindgen]
debug-js-glue = false
demangle-name-section = true
dwarf-debug-info = false

# `wasm-opt` is on by default in for the release profile, but it can be
# disabled by setting it to `false`
[package.metadata.wasm-pack.profile.release]
wasm-opt = false

[package.metadata.wasm-pack.profile.release.wasm-bindgen]
debug-js-glue = false
demangle-name-section = true
dwarf-debug-info = false